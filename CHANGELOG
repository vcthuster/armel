# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),  
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

---

## [1.2.0] – 2025-05-15

### Added
- 🧪 expect_abort() utility for testing abort() behavior in a forked subprocess (POSIX only)
- ✅ Tests covering ARL_CHECK and ARL_FATAL crash paths via expect_abort
- 🪟 Graceful fallback for expect_abort on Windows (tests skipped with message)
- 📂 make coverage target using llvm-profdata + llvm-cov with HTML report in tests/coverage-html/
- 📊 Coverage report integration in the README with full summary table
- 📋 Markdown coverage table showing function, line, branch and region coverage
- 📄 @note Doxygen warning for arl_free() misuse on local arenas
- 💡 New function: arl_new_local() — replaces arl_new_static(), safer and better named
- 💡 New macro: ARL_LOCAL(name, size) — replaces ARL_STATIC, now more intuitive
- 🔒 Alignment verification added to arl_new_local() (must be power of 2)
- 🧪 Test: test_arl_new_local_bad_alignment_abort for invalid alignments
- 🧪 Test: test_arl_new_local_valid for normal local usage

### Changed
- ♻️ Renamed arl_new_static() → arl_new_local() (more accurate semantics)
- ♻️ Renamed ARL_STATIC → ARL_LOCAL for clarity and correctness
- 🧪 expect_abort() test logic moved to armel_test.h for reuse and CI support
- ✅ make tests now compiles a test runner using tests/armel_test.c and runs all test cases
- ✅ make coverage uses LLVM_PROFILE_FILE=... to support GitHub Actions and avoid default.profraw errors
- 🧪 Output of test runner made consistent and readable (PASSED ✅, skipped, etc.)

### Removed
- ❌ Old-style static arena macro and function aliases (e.g. ARL_STATIC in tests — replaced by ARL_LOCAL)
- ❌ Raw call to fork() in test files — now wrapped via expect_abort()

---

## [1.1.0] – 2025-05-13

### Added
- Full test coverage of the core allocator (arl_alloc, arl_make, arl_array, rewind/reset)
- New tests: test_arl_state_consistency, test_arl_exact_fit, test_arl_zero_size, test_arl_repeated_reset, and more
- New armel_bench.h benchmarking header for consistent microbenchmarking (includes outlier filtering)
- Benchmark suite (in bench.c) comparing malloc/free to arl_alloc for bulk and per-element allocation
- Static inline optimization of arl_alloc and arl_new
- Cleaner default macro for local arenas (ARL_LOCAL)
- Robustness improvements: safe handling of size=0 allocations, consistent alignment checking
- arl_print_info() utility for debugging current state

### Changed
- arl_alloc() logic streamlined (faster alignment and safety checks)
- arl_new() now has a simplified default version with reasonable defaults; advanced options moved to arl_new_custom()

### Removed
- Unused alignment fallback checks inside arl_alloc

---

## [1.0.0] – 2025-05-03

### Added
- `arl_new()`, `arl_alloc()`, `arl_free()` for dynamic arenas
- `arl_make()`, `arl_array()` helpers for typed allocation
- Static arena support via `arl_new_static()` and `ARL_STATIC`
- Alignment support with `ARL_DEFAULT_ALIGNMENT`
- Optional flags: `ARL_ZEROS`, `ARL_SOFTFAIL`
- Offset-based rewind: `arl_offset()`, `arl_rewind_to()`
- Introspection: `arl_used()`, `arl_remaining()`, `arl_dump()`
- Internal system layer (`arl_sys_alloc`, `arl_sys_free`) portable on macOS/Linux/Windows
- Utility macros: `ARL_KB`, `ARL_MB`, `ARL_GB`, `arl_align_up`, `arl_size`

### Changed
- N/A

### Removed
- N/A

---

## [Unreleased]

### Planned
- Sub-arenas (stacked scopes)
- Optional thread safety
- Optional `.a` and `.so` build targets
- Integration with build systems (CMake)